[clause6_01]
cql2_json = "{\"op\":\"avg\",\"args\":[{\"property\":\"windSpeed\"}]}"
cql2_text = "avg(windSpeed)"
description = "Computes the average of a specified property."
name = "Average Property Calculation"

[clause6_02b]
cql2_json = "{\"op\":\"<\",\"args\":[{\"op\":\"avg\",\"args\":[{\"property\":\"windSpeed\"}]},4]}"
cql2_text = "avg(windSpeed) < 4"
description = "Performs a < operation on properties."
name = "Less Than Check"

[clause6_02c]
cql2_json = "{\"op\":\">\",\"args\":[{\"op\":\"-\",\"args\":[{\"property\":\"balance\"},150.0]},0]}"
cql2_text = "balance-150.0 > 0"
description = "Performs a > operation on properties."
name = "Greater Than Check"

[clause6_02d]
cql2_json = "{\"op\":\">=\",\"args\":[{\"property\":\"updated\"},{\"date\":\"1970-01-01\"}]}"
cql2_text = "updated >= date('1970-01-01')"
description = "Performs a >= operation on properties."
name = "Greater Than or Equal Check"

[clause7_01]
cql2_json = "{\"op\":\"like\",\"args\":[{\"property\":\"name\"},\"Smith%\"]}"
cql2_text = "ame LIKE 'Smith%'"
description = "Performs a like operation on properties."
name = "LIKE Operation"

[clause7_03b]
cql2_json = "{\"op\":\"not\",\"args\":[{\"op\":\"in\",\"args\":[{\"property\":\"category\"},[1,2,3,4]]}]}"
cql2_text = "category NOT IN (1,2,3,4)"
description = "Performs a not operation on properties."
name = "NOT IN Operation"

[clause7_04]
cql2_json = "{\"op\":\"in\",\"args\":[{\"op\":\"casei\",\"args\":[{\"property\":\"road_class\"}]},[{\"op\":\"casei\",\"args\":[\"Οδος\"]},{\"op\":\"casei\",\"args\":[\"Straße\"]}]]}"
cql2_text = "CASEI(road_class) IN (CASEI('Οδος'),CASEI('Straße'))"
description = "Filters features based on a property being in a specified list."
name = "Property List Filter"

[clause7_07]
cql2_json = "{\"op\":\"s_intersects\",\"args\":[{\"property\":\"geometry\"},{\"type\":\"Point\",\"coordinates\":[36.319836,32.288087]}]}"
cql2_text = "S_INTERSECTS(geometry,POINT(36.319836 32.288087))"
description = "Performs a s_intersects operation on properties."
name = "Spatial Intersects Check"

[clause7_12]
cql2_json = "{\"op\":\"t_intersects\",\"args\":[{\"property\":\"event_time\"},{\"interval\":[\"1969-07-16T05:32:00Z\",\"1969-07-24T16:50:35Z\"]}]}"
cql2_text = "T_INTERSECTS(event_time, INTERVAL('1969-07-16T05:32:00Z', '1969-07-24T16:50:35Z'))"
description = "Performs a t_intersects operation on properties."
name = "Time Intersects Check"

[clause7_13]
cql2_json = "{\"op\":\"t_during\",\"args\":[{\"interval\":[{\"property\":\"touchdown\"},{\"property\":\"liftOff\"}]},{\"interval\":[\"1969-07-16T13:32:00Z\",\"1969-07-24T16:50:35Z\"]}]}"
cql2_text = "T_DURING(INTERVAL(touchdown, liftOff), INTERVAL('1969-07-16T13:32:00Z', '1969-07-24T16:50:35Z'))"
description = "Filters features based on a time interval condition."
name = "Time Interval Condition Filter"

[clause7_16]
cql2_json = "{\"op\":\"s_crosses\",\"args\":[{\"type\":\"LineString\",\"coordinates\":[[43.72992,-79.2998],[43.73005,-79.2991],[43.73006,-79.2984],[43.7314,-79.2956],[43.73259,-79.295],[43.73266,-79.2945],[43.7332,-79.2936],[43.73378,-79.2936],[43.73486,-79.2917]]},{\"type\":\"Polygon\",\"coordinates\":[[[43.7286,-79.2986],[43.7311,-79.2996],[43.7323,-79.2972],[43.7326,-79.2971],[43.735,-79.2981],[43.735,-79.2982],[43.7352,-79.2982],[43.7357,-79.2956],[43.7337,-79.2948],[43.7343,-79.2933],[43.7339,-79.2923],[43.7327,-79.2947],[43.732,-79.2942],[43.7322,-79.2937],[43.7306,-79.293],[43.7303,-79.293],[43.7299,-79.2928],[43.7286,-79.2986]]]}]}"
cql2_text = "S_CROSSES(LINESTRING(43.72992 -79.2998, 43.73005 -79.2991, 43.73006 -79.2984, 43.73140 -79.2956, 43.73259 -79.2950, 43.73266 -79.2945, 43.73320 -79.2936, 43.73378 -79.2936, 43.73486 -79.2917), POLYGON((43.7286 -79.2986, 43.7311 -79.2996, 43.7323 -79.2972, 43.7326 -79.2971, 43.7350 -79.2981, 43.7350 -79.2982, 43.7352 -79.2982, 43.7357 -79.2956, 43.7337 -79.2948, 43.7343 -79.2933, 43.7339 -79.2923, 43.7327 -79.2947, 43.7320 -79.2942, 43.7322 -79.2937, 43.7306 -79.2930, 43.7303 -79.2930, 43.7299 -79.2928, 43.7286 -79.2986)))"
description = "Checks if a line string crosses a specified polygon."
name = "Line String Crosses Polygon Check"

[clause7_17]
cql2_json = "{\"op\":\"t_during\",\"args\":[{\"interval\":[\"1969-07-20T20:17:40Z\",\"1969-07-21T17:54:00Z\"]},{\"interval\":[\"1969-07-16T13:32:00Z\",\"1969-07-24T16:50:35Z\"]}]}"
cql2_text = "T_DURING(INTERVAL('1969-07-20T20:17:40Z', '1969-07-21T17:54:00Z'), INTERVAL('1969-07-16T13:32:00Z', '1969-07-24T16:50:35Z'))"
description = "Filters features based on a time interval condition."
name = "Time Interval Condition Filter"

[example05b]
cql2_json = "{\"op\":\"in\",\"args\":[{\"property\":\"eo:cloud_cover\"},[0.1,0.2]]}"
cql2_text = "eo:cloud_cover IN (0.1,0.2)"
description = "Filters features based on a property being in a specified list."
name = "Property List Filter"

[example06a]
cql2_json = "{\"op\":\"and\",\"args\":[{\"op\":\"between\",\"args\":[{\"property\":\"eo:cloud_cover\"},0.1,0.2]},{\"op\":\"=\",\"args\":[{\"property\":\"landsat:wrs_row\"},28]},{\"op\":\"=\",\"args\":[{\"property\":\"landsat:wrs_path\"},203]}]}"
cql2_text = "eo:cloud_cover BETWEEN 0.1 AND 0.2 AND landsat:wrs_row=28 AND landsat:wrs_path=203"
description = "Performs a and operation on properties."
name = "AND Operation"

[example09]
cql2_json = "{\"op\":\">\",\"args\":[{\"property\":\"floors\"},5]}"
cql2_text = "floors>5"
description = "Performs a > operation on properties."
name = "Greater Than Check"

[example12]
cql2_json = "{\"op\":\"like\",\"args\":[{\"property\":\"owner\"},\"Mike%\"]}"
cql2_text = "owner LIKE 'Mike%'"
description = "Performs a like operation on properties."
name = "LIKE Operation"

[example13]
cql2_json = "{\"op\":\"not\",\"args\":[{\"op\":\"like\",\"args\":[{\"property\":\"owner\"},\"%Mike%\"]}]}"
cql2_text = "owner NOT LIKE '%Mike%'"
description = "Performs a not operation on properties."
name = "NOT Operation"

[example14]
cql2_json = "{\"op\":\"=\",\"args\":[{\"property\":\"swimming_pool\"},true]}"
cql2_text = "swimming_pool = true"
description = "Performs a = operation on properties."
name = "Equals Operation"

[example16]
cql2_json = "{\"op\":\"and\",\"args\":[{\"op\":\"=\",\"args\":[{\"property\":\"swimming_pool\"},true]},{\"op\":\"or\",\"args\":[{\"op\":\">\",\"args\":[{\"property\":\"floors\"},5]},{\"op\":\"like\",\"args\":[{\"property\":\"material\"},\"brick%\"]},{\"op\":\"like\",\"args\":[{\"property\":\"material\"},\"%brick\"]}]}]}"
cql2_text = "swimming_pool=true AND (floors>5 OR material LIKE 'brick%' OR material LIKE '%brick')"
description = "Performs a and operation on properties."
name = "AND Operation"

[example17]
cql2_json = "{\"op\":\"or\",\"args\":[{\"op\":\"and\",\"args\":[{\"op\":\">\",\"args\":[{\"property\":\"floors\"},5]},{\"op\":\"=\",\"args\":[{\"property\":\"material\"},\"brick\"]}]},{\"op\":\"=\",\"args\":[{\"property\":\"swimming_pool\"},true]}]}"
cql2_text = "(floors>5 AND material='brick') OR swimming_pool=true"
description = "Performs a or operation on properties."
name = "OR Operation"

[example20]
cql2_json = "{\"op\":\"t_before\",\"args\":[{\"property\":\"built\"},{\"date\":\"2015-01-01\"}]}"
cql2_text = "T_BEFORE(built, DATE('2015-01-01'))"
description = "Performs a t_before operation on properties."
name = "Time Before Check"

[example21]
cql2_json = "{\"op\":\"t_after\",\"args\":[{\"property\":\"built\"},{\"date\":\"2012-06-05\"}]}"
cql2_text = "T_AFTER(built,DATE('2012-06-05'))"
description = "Performs a t_after operation on properties."
name = "Time After Check"

[example24]
cql2_json = "{\"op\":\"s_intersects\",\"args\":[{\"property\":\"geometry\"},{\"type\":\"Polygon\",\"coordinates\":[[[-10,-10],[10,-10],[10,10],[-10,-10]]]}]}"
cql2_text = "S_INTERSECTS(geometry,POLYGON((-10.0 -10.0,10.0 -10.0,10.0 10.0,-10.0 -10.0)))"
description = "Performs a s_intersects operation on properties."
name = "Spatial Intersects Check"

[example28]
cql2_json = "{\"op\":\"like\",\"args\":[{\"op\":\"casei\",\"args\":[{\"property\":\"geophys:SURVEY_NAME\"}]},{\"op\":\"casei\",\"args\":[\"%calcutta%\"]}]}"
cql2_text = "CASEI(geophys:SURVEY_NAME) LIKE CASEI('%calcutta%')"
description = "Performs a like operation on properties."
name = "LIKE Operation"

[example30]
cql2_json = "{\"op\":\"<>\",\"args\":[{\"property\":\"id\"},\"fa7e1920-9107-422d-a3db-c468cbc5d6df\"]}"
cql2_text = "\"id\" <> 'fa7e1920-9107-422d-a3db-c468cbc5d6df'"
description = "Performs a <> operation on properties."
name = "Not Equal Operation"

[example31]
cql2_json = "{\"op\":\"<\",\"args\":[{\"property\":\"value\"},10]}"
cql2_text = "\"value\" < 10"
description = "Performs a < operation on properties."
name = "Less Than Check"

[example32]
cql2_json = "{\"op\":\">\",\"args\":[{\"property\":\"value\"},10]}"
cql2_text = "\"value\" > 10"
description = "Performs a > operation on properties."
name = "Greater Than Check"

[example33]
cql2_json = "{\"op\":\"<=\",\"args\":[{\"property\":\"value\"},10]}"
cql2_text = "\"value\" <= 10"
description = "Performs a <= operation on properties."
name = "Less Than or Equal Check"

[example36]
cql2_json = "{\"op\":\"not\",\"args\":[{\"op\":\"like\",\"args\":[{\"property\":\"name\"},\"foo%\"]}]}"
cql2_text = "NOT \"name\" LIKE 'foo%'"
description = "Performs a not operation on properties."
name = "NOT Operation"

[example37]
cql2_json = "{\"op\":\"between\",\"args\":[{\"property\":\"value\"},10,20]}"
cql2_text = "\"value\" BETWEEN 10 AND 20"
description = "Performs a between operation on properties."
name = "Between Operation"

[example41]
cql2_json = "{\"op\":\"isNull\",\"args\":[{\"property\":\"value\"}]}"
cql2_text = "\"value\" IS NULL"
description = "Performs a isNull operation on properties."
name = "isNull Operation"

[example44]
cql2_json = "{\"op\":\"or\",\"args\":[{\"op\":\"isNull\",\"args\":[{\"property\":\"value\"}]},{\"op\":\"between\",\"args\":[{\"property\":\"value\"},10,20]}]}"
cql2_text = "(\"value\" IS NULL OR \"value\" BETWEEN 10 AND 20)"
description = "Performs a or operation on properties."
name = "OR Operation"

[example45]
cql2_json = "{\"op\":\"s_intersects\",\"args\":[{\"property\":\"geometry\"},{\"bbox\":[-128.098193,-1.1,-99999.0,180.0,90.0,100000.0]}]}"
cql2_text = "S_INTERSECTS(\"geometry\", BBOX(-128.098193, -1.1, -99999.0, 180.0, 90.0, 100000.0))"
description = "Performs a s_intersects operation on properties."
name = "Spatial Intersects Check"

[example47]
cql2_json = "{\"op\":\"s_disjoint\",\"args\":[{\"property\":\"geometry\"},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[144.022387,45.176126],[-1.1,0.0],[180.0,47.808086],[144.022387,45.176126]]]]}]}"
cql2_text = "S_DISJOINT(\"geometry\", MULTIPOLYGON (((144.022387 45.176126, -1.1 0.0, 180.0 47.808086, 144.022387 45.176126))))"
description = "Performs a s_disjoint operation on properties."
name = "Spatial Disjoint Check"

[example48]
cql2_json = "{\"op\":\"s_touches\",\"args\":[{\"property\":\"geometry\"},{\"type\":\"MultiLineString\",\"coordinates\":[[[-1.9,-0.99999],[75.292574,1.5],[-0.5,-4.016458],[-31.708594,-74.743801],[179.0,-90.0]],[[-1.9,-1.1],[1.5,8.547371]]]}]}"
cql2_text = "S_TOUCHES(\"geometry\", MULTILINESTRING ((-1.9 -0.99999, 75.292574 1.5, -0.5 -4.016458, -31.708594 -74.743801, 179.0 -90.0),(-1.9 -1.1, 1.5 8.547371)))"
description = "Performs a s_touches operation on properties."
name = "Spatial Touches Check"

[example49]
cql2_json = "{\"op\":\"s_within\",\"args\":[{\"type\":\"Polygon\",\"coordinates\":[[[-49.88024,0.5,-75993.341684],[-1.5,-0.99999,-100000.0],[0.0,0.5,-0.333333],[-49.88024,0.5,-75993.341684]],[[-65.887123,2.00001,-100000.0],[0.333333,-53.017711,-79471.332949],[180.0,0.0,1852.616704],[-65.887123,2.00001,-100000.0]]]},{\"property\":\"geometry\"}]}"
cql2_text = "S_WITHIN(POLYGON Z ((-49.88024 0.5 -75993.341684, -1.5 -0.99999 -100000.0, 0.0 0.5 -0.333333, -49.88024 0.5 -75993.341684), (-65.887123 2.00001 -100000.0, 0.333333 -53.017711 -79471.332949, 180.0 0.0 1852.616704, -65.887123 2.00001 -100000.0)), \"geometry\")"
description = "Performs a s_within operation on properties."
name = "Spatial Within Check"

[example50]
cql2_json = "{\"op\":\"s_overlaps\",\"args\":[{\"property\":\"geometry\"},{\"bbox\":[-179.912109,1.9,180.0,16.897016]}]}"
cql2_text = "S_OVERLAPS(\"geometry\", BBOX(-179.912109, 1.9, 180.0, 16.897016))"
description = "Performs a s_overlaps operation on properties."
name = "Spatial Overlaps Check"

[example52]
cql2_json = "{\"op\":\"s_contains\",\"args\":[{\"property\":\"geometry\"},{\"type\":\"Point\",\"coordinates\":[-3.508362,-1.754181]}]}"
cql2_text = "S_CONTAINS(\"geometry\", POINT (-3.508362 -1.754181))"
description = "Performs a s_contains operation on properties."
name = "Spatial Contains Check"

[example53]
cql2_json = "{\"op\":\"t_after\",\"args\":[{\"property\":\"updated_at\"},{\"date\":\"2010-02-10\"}]}"
cql2_text = "T_AFTER(\"updated_at\", DATE('2010-02-10'))"
description = "Performs a t_after operation on properties."
name = "Time After Check"

[example55]
cql2_json = "{\"op\":\"t_contains\",\"args\":[{\"interval\":[\"2000-01-01T00:00:00Z\",\"2005-01-10T01:01:01.393216Z\"]},{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]}]}"
cql2_text = "T_CONTAINS(INTERVAL('2000-01-01T00:00:00.000000Z', '2005-01-10T01:01:01.393216Z'), INTERVAL(starts_at, ends_at))"
description = "Performs a t_contains operation on properties."
name = "Time Contains Check"

[example56]
cql2_json = "{\"op\":\"t_disjoint\",\"args\":[{\"interval\":[\"..\",\"2005-01-10T01:01:01.393216Z\"]},{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]}]}"
cql2_text = "T_DISJOINT(INTERVAL('..', '2005-01-10T01:01:01.393216Z'), INTERVAL(starts_at, ends_at))"
description = "Performs a t_disjoint operation on properties."
name = "Time Disjoint Check"

[example57]
cql2_json = "{\"op\":\"t_during\",\"args\":[{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]},{\"interval\":[\"2005-01-10\",\"2010-02-10\"]}]}"
cql2_text = "T_DURING(INTERVAL(starts_at, ends_at), INTERVAL('2005-01-10', '2010-02-10'))"
description = "Filters features based on a time interval condition."
name = "Time Interval Filter"

[example58]
cql2_json = "{\"op\":\"t_equals\",\"args\":[{\"property\":\"updated_at\"},{\"date\":\"1851-04-29\"}]}"
cql2_text = "T_EQUALS(\"updated_at\", DATE('1851-04-29'))"
description = "Performs a t_equals operation on properties."
name = "Time Equals Check"

[example60]
cql2_json = "{\"op\":\"t_finishes\",\"args\":[{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]},{\"interval\":[\"1991-10-07\",\"2010-02-10T05:29:20.073225Z\"]}]}"
cql2_text = "T_FINISHES(INTERVAL(starts_at, ends_at), INTERVAL('1991-10-07', '2010-02-10T05:29:20.073225Z'))"
description = "Performs a t_finishes operation on properties."
name = "Time Finishes Check"

[example61]
cql2_json = "{\"op\":\"t_intersects\",\"args\":[{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]},{\"interval\":[\"1991-10-07T08:21:06.393262Z\",\"2010-02-10T05:29:20.073225Z\"]}]}"
cql2_text = "T_INTERSECTS(INTERVAL(starts_at, ends_at), INTERVAL('1991-10-07T08:21:06.393262Z', '2010-02-10T05:29:20.073225Z'))"
description = "Performs a t_intersects operation on properties."
name = "Time Intersects Check"

[example62]
cql2_json = "{\"op\":\"t_meets\",\"args\":[{\"interval\":[\"2005-01-10\",\"2010-02-10\"]},{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]}]}"
cql2_text = "T_MEETS(INTERVAL('2005-01-10', '2010-02-10'), INTERVAL(starts_at, ends_at))"
description = "Performs a t_meets operation on properties."
name = "Time Meets Check"

[example63]
cql2_json = "{\"op\":\"t_metBy\",\"args\":[{\"interval\":[\"2010-02-10T05:29:20.073225Z\",\"2010-10-07\"]},{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]}]}"
cql2_text = "T_METBY(INTERVAL('2010-02-10T05:29:20.073225Z', '2010-10-07'), INTERVAL(starts_at, ends_at))"
description = "Performs a t_metBy operation on properties."
name = "Time MetBy Check"

[example64]
cql2_json = "{\"op\":\"t_overlappedBy\",\"args\":[{\"interval\":[\"1991-10-07T08:21:06.393262Z\",\"2010-02-10T05:29:20.073225Z\"]},{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]}]}"
cql2_text = "T_OVERLAPPEDBY(INTERVAL('1991-10-07T08:21:06.393262Z', '2010-02-10T05:29:20.073225Z'), INTERVAL(starts_at, ends_at))"
description = "Performs a t_overlappedBy operation on properties."
name = "Time OverlappedBy Check"

[example65]
cql2_json = "{\"op\":\"t_overlaps\",\"args\":[{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]},{\"interval\":[\"1991-10-07T08:21:06.393262Z\",\"1992-10-09T08:08:08.393473Z\"]}]}"
cql2_text = "T_OVERLAPS(INTERVAL(starts_at, ends_at), INTERVAL('1991-10-07T08:21:06.393262Z', '1992-10-09T08:08:08.393473Z'))"
description = "Performs a t_overlaps operation on properties."
name = "Time Overlaps Check"

[example66]
cql2_json = "{\"op\":\"t_startedBy\",\"args\":[{\"interval\":[\"1991-10-07T08:21:06.393262Z\",\"2010-02-10T05:29:20.073225Z\"]},{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]}]}"
cql2_text = "T_STARTEDBY(INTERVAL('1991-10-07T08:21:06.393262Z', '2010-02-10T05:29:20.073225Z'), INTERVAL(starts_at, ends_at))"
description = "Performs a t_startedBy operation on properties."
name = "Time StartedBy Check"

[example67]
cql2_json = "{\"op\":\"t_starts\",\"args\":[{\"interval\":[{\"property\":\"starts_at\"},{\"property\":\"ends_at\"}]},{\"interval\":[\"1991-10-07T08:21:06.393262Z\",\"..\"]}]}"
cql2_text = "T_STARTS(INTERVAL(starts_at, ends_at), INTERVAL('1991-10-07T08:21:06.393262Z', '..'))"
description = "Performs a t_starts operation on properties."
name = "Time Starts Check"

[example69]
cql2_json = "{\"op\":\"<>\",\"args\":[false,{\"op\":\"Bar\",\"args\":[{\"property\":\"geometry\"},100,\"a\",\"b\",false]}]}"
cql2_text = "FALSE <> Bar(\"geometry\", 100, 'a', 'b', FALSE)"
description = "Performs a <> operation on properties."
name = "Not Equal Operation"

[example72]
cql2_json = "{\"op\":\">\",\"args\":[{\"property\":\"value\"},{\"op\":\"+\",\"args\":[{\"property\":\"foo\"},10]}]}"
cql2_text = "\"value\" > (\"foo\" + 10)"
description = "Performs a > operation on properties."
name = "Greater Than Check"

[example73]
cql2_json = "{\"op\":\"<\",\"args\":[{\"property\":\"value\"},{\"op\":\"-\",\"args\":[{\"property\":\"foo\"},10]}]}"
cql2_text = "\"value\" < (\"foo\" - 10)"
description = "Performs a < operation on properties."
name = "Less Than Check"

[example76]
cql2_json = "{\"op\":\"<=\",\"args\":[{\"property\":\"value\"},{\"op\":\"^\",\"args\":[2,{\"property\":\"foo\"}]}]}"
cql2_text = "\"value\" <= (2 ^ \"foo\")"
description = "Performs a <= operation on properties."
name = "Less Than or Equal Check"

[example77]
cql2_json = "{\"op\":\"=\",\"args\":[0,{\"op\":\"%\",\"args\":[{\"property\":\"foo\"},2]}]}"
cql2_text = "0 = (\"foo\" % 2)"
description = "Performs a = operation on properties."
name = "Equals Operation"

[example82]
cql2_json = "{\"op\":\"a_overlaps\",\"args\":[{\"property\":\"values\"},[{\"timestamp\":\"2012-08-10T05:30:00Z\"},{\"date\":\"2010-02-10\"},false]]}"
cql2_text = "A_OVERLAPS(\"values\", (TIMESTAMP('2012-08-10T05:30:00.000000Z'), DATE('2010-02-10'), FALSE))"
description = "Checks for overlapping attribute values within a specified date range."
name = "Overlapping Attribute Values Check"

[example83]
cql2_json = "{\"op\":\"s_equals\",\"args\":[{\"type\":\"MultiPoint\",\"coordinates\":[[180.0,-0.5],[179.0,-47.121701],[180.0,-0.0],[33.470475,-0.99999],[179.0,-15.333062]]},{\"property\":\"geometry\"}]}"
cql2_text = "S_EQUALS(MULTIPOINT ((180.0 -0.5), (179.0 -47.121701), (180.0 -0.0), (33.470475 -0.99999), (179.0 -15.333062)), \"geometry\")"
description = "Performs a s_equals operation on properties."
name = "Spatial Equals Check"

[example86]
cql2_json = "{\"op\":\"like\",\"args\":[{\"property\":\"name\"},{\"op\":\"casei\",\"args\":[\"FOO%\"]}]}"
cql2_text = "\"name\" LIKE CASEI('FOO%')"
description = "Performs a like operation on properties."
name = "LIKE Operation"
