name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  duckdb-version: "1.3.2"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      DUCKDB_LIB_DIR: ${{ github.workspace }}/opt/duckdb
      LD_LIBRARY_PATH: ${{ github.workspace }}/opt/duckdb
      DYLD_LIBRARY_PATH: ${{ github.workspace }}/opt/duckdb
    steps:
      - uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - name: Install libduckdb
        run: |
          wget https://github.com/duckdb/duckdb/releases/download/v${{ env.duckdb-version }}/libduckdb-linux-amd64.zip
          mkdir -p ${{ github.workspace }}/opt/duckdb
          unzip libduckdb-${{ matrix.os.duckdb-slug }}.zip -d ${{ github.workspace }}/opt/duckdb
      - name: Format
        run: cargo fmt --check
      - name: Check
        run: cargo check --workspace
      - name: Clippy
        run: cargo clippy --workspace --tests --no-default-features -- -D warnings
      - name: Test
        run: cargo test --no-default-features # the only feature turns on DuckDB bundling for tests
  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.14"]
    steps:
      - uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - uses: astral-sh/setup-uv@v7
        with:
          python-version: ${{ matrix.python-version }}
      - name: Lint
        run: |
          uv run mypy python
          uv run ruff check
          uv run ruff format --check
      - name: Test
        run: uv run pytest
      - name: CLI smoke test
        run: uv run cql2 < examples/text/example01.txt
  build-wasm:
    name: Build wasm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: "latest"
      - name: Build WASM
        run: scripts/buildwasm
