{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cql2-rs","text":"<p>cql2-rs is Python package, command-line interface (CLI), and Rust crate for parsing, validating, and converting Common Query Language (CQL2).</p>"},{"location":"#python","title":"Python","text":"<pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr.to_json()\n{'op': '=', 'args': [{'property': 'landsat:scene_id'}, 'LC82030282019133LGN00']}\n</code></pre>"},{"location":"#cli","title":"CLI","text":"<pre><code>$ cql2 &lt; tests/fixtures/text/example01.txt # will succeed if the CQL2 is valid\n(\"landsat:scene_id\" = 'LC82030282019133LGN00')\n</code></pre>"},{"location":"#rust","title":"Rust","text":"<pre><code>use cql2::Expr;\nlet expr: Expr = \"landsat:scene_id = 'LC82030282019133LGN00'\".parse();\nlet json = expr.to_json().unwrap();\n</code></pre>"},{"location":"cli/","title":"CLI","text":"<p>cql2-rs includes a command-line interface (CLI).</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>pip install cql2\n</code></pre> <p>Or, if you have Rust:</p> <pre><code>cargo install cql2-cli\n</code></pre>"},{"location":"cli/#usage","title":"Usage","text":"<p>At its simplest, the CLI is a pass-through validator:</p> <pre><code>$ cql2 &lt; tests/fixtures/text/example01.txt # will succeed if the CQL2 is valid\n(\"landsat:scene_id\" = 'LC82030282019133LGN00')\n</code></pre> <p>You can convert formats:</p> <pre><code>$ cql2 -o json &lt; tests/fixtures/text/example01.txt\n{\"op\":\"=\",\"args\":[{\"property\":\"landsat:scene_id\"},\"LC82030282019133LGN00\"]}\n</code></pre> <p>Use <code>-v</code> to get detailed validation information:</p> <pre><code>$ cql2 'wrong' -v\n[ERROR] Invalid CQL2: wrong\nFor more detailed validation information, use -vv\njsonschema validation failed with file:///tmp/cql2.json#\n- at '': oneOf failed, none matched\n  - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': oneOf failed, none matched\n    - at '': missing properties 'op', 'args'\n    - at '': missing properties 'op', 'args'\n    - at '': missing properties 'op', 'args'\n    - at '': missing properties 'op', 'args'\n    - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': want boolean, but got object\n</code></pre> <p>cql2-text parsing errors are pretty-printed:</p> <pre><code>$ cql2 '(foo ~= \"bar\")'\n[ERROR] Parsing error: (foo ~= \"bar\")\n --&gt; 1:6\n  |\n1 | (foo ~= \"bar\")\n  |      ^---\n  |\n  = expected NotFlag, And, Or, ConcatInfixOp, Add, Subtract, Multiply, Divide, Modulo, Power, Eq, Gt, GtEq, Lt, LtEq, NotEq, Is, or IsNullPostfix\n</code></pre> <p>Use <code>cql2 --help</code> to get a complete listing of the CLI arguments and formats.</p>"},{"location":"playground/","title":"Wasm Playground","text":"CQL2 Playground <p>Examples:  - clause6_01.txt clause6_02a.txt clause6_02b.txt clause6_02c.txt clause6_02d.txt clause6_03.txt clause7_01.txt clause7_02.txt clause7_03a.txt clause7_03b.txt clause7_04.txt clause7_05.txt clause7_07.txt clause7_10.txt clause7_12.txt clause7_13.txt clause7_15.txt clause7_16.txt clause7_17.txt clause7_18.txt clause7_19.txt example01.txt example02.txt example03.txt example04.txt example05a.txt example05b.txt example06a.txt example06b.txt example07.txt example08.txt example09.txt example10.txt example11.txt example12.txt example13.txt example14.txt example15.txt example16.txt example17.txt example18.txt example19.txt example20.txt example21.txt example22.txt example23.txt example24.txt example25.txt example26.txt example27.txt example28.txt example29.txt example30.txt example31.txt example32.txt example33.txt example34.txt example35.txt example36-alt01.txt example36.txt example37.txt example38-alt01.txt example38.txt example39.txt example40-alt01.txt example40.txt example41.txt example42-alt01.txt example42.txt example43-alt01.txt example43.txt example44-alt01.txt example44.txt example45.txt example46-alt01.txt example46.txt example47.txt example48.txt example49-alt01.txt example49.txt example50.txt example51.txt example52.txt example53.txt example54-alt01.txt example54.txt example55-alt01.txt example55.txt example56.txt example57.txt example58.txt example59.txt example60.txt example61.txt example62.txt example63.txt example64.txt example65.txt example66.txt example67.txt example68.txt example69.txt example70.txt example71.txt example72.txt example73.txt example74.txt example75.txt example76.txt example77.txt example78.txt example79.txt example80.txt example81.txt example82.txt example83.txt example84.txt example85-alt01.txt example85.txt example86.txt clause6_01.json clause6_02a.json clause6_02b.json clause6_02c.json clause6_02d.json clause6_03.json clause7_01.json clause7_02.json clause7_03a.json clause7_03b.json clause7_04.json clause7_05.json clause7_07.json clause7_10.json clause7_12.json clause7_13.json clause7_15.json clause7_16.json clause7_17.json clause7_18.json clause7_19.json example01.json example02.json example03.json example04.json example05a.json example05b.json example06a.json example06b.json example07.json example08.json example09.json example10.json example11.json example12.json example13.json example14.json example15.json example16.json example17.json example18.json example19.json example20.json example21.json example22.json example23.json example24.json example25.json example26.json example27.json example28.json example29.json example30.json example31.json example32.json example33.json example34.json example35.json example36.json example37.json example38.json example39.json example40.json example41.json example42.json example43.json example44.json example45.json example46.json example47.json example48.json example49.json example50.json example51.json example52.json example53.json example54.json example55.json example56.json example57.json example58.json example59.json example60.json example61.json example62.json example63.json example64.json example65.json example66.json example67.json example68.json example69.json example70.json example71.json example72.json example73.json example74.json example75.json example76.json example77.json example78.json example79.json example80.json example81.json example82.json example83.json example84.json example85.json example86.json <p> foo &gt; 1</p> <p>   Valid:    Parsed CQL2 Text    Parsed CQL2 Text</p> <p>   Parsed CQL2 JSON    Parsed CQL2 JSON </p>"},{"location":"python/","title":"Python","text":"<p>Python API documentation for the cql2 package. Install from PyPI:</p> <pre><code>python -m pip install cql2\n</code></pre>"},{"location":"python/#api","title":"API","text":""},{"location":"python/#cql2.parse_file","title":"<code>cql2.parse_file(path)</code>","text":"<p>Parses CQL2 from a filesystem path.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>PathLike | str</code>)           \u2013            <p>The input path</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The CQL2 expression</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr.parse_file(\"fixtures/text/example01.txt\")\n</code></pre>"},{"location":"python/#cql2.parse_json","title":"<code>cql2.parse_json(s)</code>","text":"<p>Parses cql2-json.</p> <p>Parameters:</p> <ul> <li> <code>s</code>               (<code>str</code>)           \u2013            <p>The cql2-json string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The CQL2 expression</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ParseError</code>             \u2013            <p>Raised if the string does not parse as cql2-json</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr.parse_json('{\"op\":\"=\",\"args\":[{\"property\":\"landsat:scene_id\"},\"LC82030282019133LGN00\"]}')\n</code></pre>"},{"location":"python/#cql2.parse_text","title":"<code>cql2.parse_text(s)</code>","text":"<p>Parses cql2-text.</p> <p>Parameters:</p> <ul> <li> <code>s</code>               (<code>str</code>)           \u2013            <p>The cql2-text</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The CQL2 expression</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ParseError</code>             \u2013            <p>Raised if the string does not parse as cql2-text</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr.parse_text(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n</code></pre>"},{"location":"python/#cql2.Expr","title":"<code>cql2.Expr(cql2)</code>","text":"<p>A CQL2 expression.</p> <p>The cql2 can either be a cql2-text string, a cql2-json string, or a cql2-json dictionary.</p> <p>Parameters:</p> <ul> <li> <code>cql2</code>               (<code>str | dict[str, Any]</code>)           \u2013            <p>The input CQL2</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr = Expr({\"op\":\"=\",\"args\":[{\"property\":\"landsat:scene_id\"},\"LC82030282019133LGN00\"]})\n</code></pre>"},{"location":"python/#cql2.Expr.__add__","title":"<code>__add__(other)</code>","text":"<p>Combines two cql2 expressions using the AND operator.</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Expr</code>)           \u2013            <p>The other expression</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The combined expression</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr1 = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr2 = Expr(\"landsat:cloud_cover = 10\")\n&gt;&gt;&gt; expr = expr1 + expr2\n</code></pre>"},{"location":"python/#cql2.Expr.to_json","title":"<code>to_json()</code>","text":"<p>Converts this cql2 expression to a cql2-json dictionary.</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>dict[str, Any]: The cql2-json</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr.to_json()\n{'op': '=', 'args': [{'property': 'landsat:scene_id'}, 'LC82030282019133LGN00']}\n</code></pre>"},{"location":"python/#cql2.Expr.to_sql","title":"<code>to_sql()</code>","text":"<p>Converts this cql2 expression to a SQL query.</p> <p>Returns:</p> <ul> <li> <code>SqlQuery</code> (              <code>SqlQuery</code> )          \u2013            <p>The SQL query and parameters</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; q.query\n'(\"landsat:scene_id\" = $1)'\n&gt;&gt;&gt; q.params\n['LC82030282019133LGN00']\n</code></pre>"},{"location":"python/#cql2.Expr.to_text","title":"<code>to_text()</code>","text":"<p>Converts this cql2 expression to cql2-text.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The cql2-text</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr({\"op\":\"=\",\"args\":[{\"property\":\"landsat:scene_id\"},\"LC82030282019133LGN00\"]})\n&gt;&gt;&gt; expr.to_text()\n'(\"landsat:scene_id\" = 'LC82030282019133LGN00')'\n</code></pre>"},{"location":"python/#cql2.Expr.validate","title":"<code>validate()</code>","text":"<p>Validates this expression using json-schema.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the validation fails</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr.validate()\n</code></pre>"},{"location":"python/#cql2.SqlQuery","title":"<code>cql2.SqlQuery</code>","text":"<p>A SQL query</p>"},{"location":"python/#cql2.SqlQuery.params","title":"<code>params: list[str]</code>  <code>instance-attribute</code>","text":"<p>The parameters, to use for binding.</p>"},{"location":"python/#cql2.SqlQuery.query","title":"<code>query: str</code>  <code>instance-attribute</code>","text":"<p>The query, with parameterized fields.</p>"},{"location":"python/#cql2.ParseError","title":"<code>cql2.ParseError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>An error raised when cql2 parsing fails.</p>"},{"location":"python/#cql2.ValidationError","title":"<code>cql2.ValidationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>An error raised when cql2 json-schema validation fails.</p>"},{"location":"pkg/","title":"cql2-wasm","text":"<p>This is a no-release crate to build a small WebAssembly wrapper for this crate.</p>"},{"location":"pkg/#building","title":"Building","text":"<p>Get wasm-pack. Then (from the top-level directory in this repo):</p> <pre><code>scripts/buildwasm\n</code></pre> <p>You can then preview our WASM playground locally. Get uv, then:</p> <pre><code>uv sync\nuv run mkdocs serve\n</code></pre> <p>The playground will be available at http://127.0.0.1:8000/cql2-rs/playground/. There is a live version available at http://developmentseed.org/cql2-rs/latest/playground/.</p>"}]}