{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cql2-rs","text":"<p>cql2-rs is Python package, command-line interface (CLI), and Rust crate for parsing, validating, and converting Common Query Language (CQL2).</p>"},{"location":"#python","title":"Python","text":"<pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr.to_json()\n{'op': '=', 'args': [{'property': 'landsat:scene_id'}, 'LC82030282019133LGN00']}\n</code></pre>"},{"location":"#cli","title":"CLI","text":"<pre><code>$ cql2 &lt; tests/fixtures/text/example01.txt # will succeed if the CQL2 is valid\n(\"landsat:scene_id\" = 'LC82030282019133LGN00')\n</code></pre>"},{"location":"#rust","title":"Rust","text":"<pre><code>use cql2::Expr;\nlet expr: Expr = \"landsat:scene_id = 'LC82030282019133LGN00'\".parse();\nlet json = expr.to_json().unwrap();\n</code></pre>"},{"location":"cli/","title":"CLI","text":"<p>cql2-rs includes a command-line interface (CLI).</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>pip install cql2\n</code></pre> <p>Or, if you have Rust:</p> <pre><code>cargo install cql2-cli\n</code></pre>"},{"location":"cli/#usage","title":"Usage","text":"<p>At its simplest, the CLI is a pass-through validator:</p> <pre><code>$ cql2 &lt; tests/fixtures/text/example01.txt # will succeed if the CQL2 is valid\n(\"landsat:scene_id\" = 'LC82030282019133LGN00')\n</code></pre> <p>You can convert formats:</p> <pre><code>$ cql2 -o json &lt; tests/fixtures/text/example01.txt\n{\"op\":\"=\",\"args\":[{\"property\":\"landsat:scene_id\"},\"LC82030282019133LGN00\"]}\n</code></pre> <p>Use <code>-v</code> to get detailed validation information:</p> <pre><code>$ cql2 'wrong' -v\n[ERROR] Invalid CQL2: wrong\nFor more detailed validation information, use -vv\njsonschema validation failed with file:///tmp/cql2.json#\n- at '': oneOf failed, none matched\n  - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': oneOf failed, none matched\n    - at '': missing properties 'op', 'args'\n    - at '': missing properties 'op', 'args'\n    - at '': missing properties 'op', 'args'\n    - at '': missing properties 'op', 'args'\n    - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': missing properties 'op', 'args'\n  - at '': want boolean, but got object\n</code></pre> <p>cql2-text parsing errors are pretty-printed:</p> <pre><code>$ cql2 '(foo ~= \"bar\")'\n[ERROR] Parsing error: (foo ~= \"bar\")\n --&gt; 1:6\n  |\n1 | (foo ~= \"bar\")\n  |      ^---\n  |\n  = expected NotFlag, And, Or, ConcatInfixOp, Add, Subtract, Multiply, Divide, Modulo, Power, Eq, Gt, GtEq, Lt, LtEq, NotEq, Is, or IsNullPostfix\n</code></pre> <p>Use <code>cql2 --help</code> to get a complete listing of the CLI arguments and formats.</p>"},{"location":"playground/","title":"CQL2 WASM Playground","text":"<p> CQL2 Text CQL2 JSON <p></p> <p> - <p> </p> <p> Parsed CQL2 Text Parsed CQL2 JSON </p>"},{"location":"python/","title":"Python","text":"<p>Python API documentation for the cql2 package. Install from PyPI:</p> <pre><code>python -m pip install cql2\n</code></pre>"},{"location":"python/#api","title":"API","text":""},{"location":"python/#cql2.parse_file","title":"<code>cql2.parse_file(path)</code>","text":"<p>Parses CQL2 from a filesystem path.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>PathLike | str</code>)           \u2013            <p>The input path</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The CQL2 expression</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr.parse_file(\"fixtures/text/example01.txt\")\n</code></pre>"},{"location":"python/#cql2.parse_json","title":"<code>cql2.parse_json(s)</code>","text":"<p>Parses cql2-json.</p> <p>Parameters:</p> <ul> <li> <code>s</code>               (<code>str</code>)           \u2013            <p>The cql2-json string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The CQL2 expression</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ParseError</code>             \u2013            <p>Raised if the string does not parse as cql2-json</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr.parse_json('{\"op\":\"=\",\"args\":[{\"property\":\"landsat:scene_id\"},\"LC82030282019133LGN00\"]}')\n</code></pre>"},{"location":"python/#cql2.parse_text","title":"<code>cql2.parse_text(s)</code>","text":"<p>Parses cql2-text.</p> <p>Parameters:</p> <ul> <li> <code>s</code>               (<code>str</code>)           \u2013            <p>The cql2-text</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The CQL2 expression</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ParseError</code>             \u2013            <p>Raised if the string does not parse as cql2-text</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr.parse_text(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n</code></pre>"},{"location":"python/#cql2.Expr","title":"<code>cql2.Expr(cql2)</code>","text":"<p>A CQL2 expression.</p> <p>The cql2 can either be a cql2-text string, a cql2-json string, or a cql2-json dictionary.</p> <p>Parameters:</p> <ul> <li> <code>cql2</code>               (<code>str | dict[str, Any]</code>)           \u2013            <p>The input CQL2</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr = Expr({\"op\":\"=\",\"args\":[{\"property\":\"landsat:scene_id\"},\"LC82030282019133LGN00\"]})\n</code></pre>"},{"location":"python/#cql2.Expr.__add__","title":"<code>__add__(other)</code>","text":"<p>Combines two cql2 expressions using the AND operator.</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Expr</code>)           \u2013            <p>The other expression</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The combined expression</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr1 = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr2 = Expr(\"landsat:cloud_cover = 10\")\n&gt;&gt;&gt; expr = expr1 + expr2\n</code></pre>"},{"location":"python/#cql2.Expr.matches","title":"<code>matches(item)</code>","text":"<p>Matches this expression against an item.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The item to match against</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the expression matches the item, False otherwise</p> </li> </ul>"},{"location":"python/#cql2.Expr.reduce","title":"<code>reduce(item=None)</code>","text":"<p>Reduces this expression against an item.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>The item to reduce against</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Expr</code> (              <code>Expr</code> )          \u2013            <p>The reduced expression</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"true AND true\").reduce()\n&gt;&gt;&gt; expr.to_text()\n'true'\n</code></pre>"},{"location":"python/#cql2.Expr.to_json","title":"<code>to_json()</code>","text":"<p>Converts this cql2 expression to a cql2-json dictionary.</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>dict[str, Any]: The cql2-json</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr.to_json()\n{'op': '=', 'args': [{'property': 'landsat:scene_id'}, 'LC82030282019133LGN00']}\n</code></pre>"},{"location":"python/#cql2.Expr.to_sql","title":"<code>to_sql()</code>","text":"<p>Converts this cql2 expression to a SQL query.</p> <p>Returns:</p> <ul> <li> <code>SqlQuery</code> (              <code>SqlQuery</code> )          \u2013            <p>The SQL query and parameters</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; q.query\n'(\"landsat:scene_id\" = $1)'\n&gt;&gt;&gt; q.params\n['LC82030282019133LGN00']\n</code></pre>"},{"location":"python/#cql2.Expr.to_text","title":"<code>to_text()</code>","text":"<p>Converts this cql2 expression to cql2-text.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The cql2-text</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr({\"op\":\"=\",\"args\":[{\"property\":\"landsat:scene_id\"},\"LC82030282019133LGN00\"]})\n&gt;&gt;&gt; expr.to_text()\n'(\"landsat:scene_id\" = 'LC82030282019133LGN00')'\n</code></pre>"},{"location":"python/#cql2.Expr.validate","title":"<code>validate()</code>","text":"<p>Validates this expression using json-schema.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the validation fails</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from cql2 import Expr\n&gt;&gt;&gt; expr = Expr(\"landsat:scene_id = 'LC82030282019133LGN00'\")\n&gt;&gt;&gt; expr.validate()\n</code></pre>"},{"location":"python/#cql2.SqlQuery","title":"<code>cql2.SqlQuery</code>","text":"<p>A SQL query</p>"},{"location":"python/#cql2.SqlQuery.params","title":"<code>params: list[str]</code>  <code>instance-attribute</code>","text":"<p>The parameters, to use for binding.</p>"},{"location":"python/#cql2.SqlQuery.query","title":"<code>query: str</code>  <code>instance-attribute</code>","text":"<p>The query, with parameterized fields.</p>"},{"location":"python/#cql2.ParseError","title":"<code>cql2.ParseError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>An error raised when cql2 parsing fails.</p>"},{"location":"python/#cql2.ValidationError","title":"<code>cql2.ValidationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>An error raised when cql2 json-schema validation fails.</p>"},{"location":"pkg/","title":"cql2-wasm","text":"<p>This is a no-release crate to build a small WebAssembly wrapper for this crate.</p>"},{"location":"pkg/#building","title":"Building","text":"<p>Get wasm-pack. Then (from the top-level directory in this repo):</p> <pre><code>scripts/buildwasm\n</code></pre> <p>You can then preview our WASM playground locally. Get uv, then:</p> <pre><code>uv sync\nuv run mkdocs serve\n</code></pre> <p>The playground will be available at http://127.0.0.1:8000/cql2-rs/playground/. There is a live version available at http://developmentseed.org/cql2-rs/latest/playground/.</p>"}]}